//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "contents")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub original_title: Option<String>,
    pub publication_date: Option<i64>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub type_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::books_contents::Entity")]
    BooksContents,
    #[sea_orm(has_many = "super::contents_current_languages::Entity")]
    ContentsCurrentLanguages,
    #[sea_orm(has_many = "super::contents_original_languages::Entity")]
    ContentsOriginalLanguages,
    #[sea_orm(has_many = "super::contents_people::Entity")]
    ContentsPeople,
    #[sea_orm(has_many = "super::contents_source_languages::Entity")]
    ContentsSourceLanguages,
    #[sea_orm(has_many = "super::contents_tags::Entity")]
    ContentsTags,
    #[sea_orm(
        belongs_to = "super::contents_types::Entity",
        from = "Column::TypeId",
        to = "super::contents_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ContentsTypes,
}

impl Related<super::books_contents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksContents.def()
    }
}

impl Related<super::contents_current_languages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsCurrentLanguages.def()
    }
}

impl Related<super::contents_original_languages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsOriginalLanguages.def()
    }
}

impl Related<super::contents_people::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsPeople.def()
    }
}

impl Related<super::contents_source_languages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsSourceLanguages.def()
    }
}

impl Related<super::contents_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsTags.def()
    }
}

impl Related<super::contents_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsTypes.def()
    }
}

impl Related<super::books::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_contents::Relation::Books.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::books_contents::Relation::Contents.def().rev())
    }
}

impl Related<super::current_languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_current_languages::Relation::CurrentLanguages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::contents_current_languages::Relation::Contents
                .def()
                .rev(),
        )
    }
}

impl Related<super::original_languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_original_languages::Relation::OriginalLanguages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::contents_original_languages::Relation::Contents
                .def()
                .rev(),
        )
    }
}

impl Related<super::people::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_people::Relation::People.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contents_people::Relation::Contents.def().rev())
    }
}

impl Related<super::source_languages::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_source_languages::Relation::SourceLanguages.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::contents_source_languages::Relation::Contents
                .def()
                .rev(),
        )
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contents_tags::Relation::Contents.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
