//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "people")]
pub struct Model {
    #[sea_orm(primary_key, unique)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub nationality: Option<String>,
    pub birth_date: Option<i32>,
    pub role: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::aliases::Entity")]
    Aliases,
    #[sea_orm(has_many = "super::books_people::Entity")]
    BooksPeople,
    #[sea_orm(has_many = "super::contents_people::Entity")]
    ContentsPeople,
    #[sea_orm(
        belongs_to = "super::roles::Entity",
        from = "Column::Role",
        to = "super::roles::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Roles,
}

impl Related<super::aliases::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Aliases.def()
    }
}

impl Related<super::books_people::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksPeople.def()
    }
}

impl Related<super::contents_people::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsPeople.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roles.def()
    }
}

impl Related<super::books::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_people::Relation::Books.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::books_people::Relation::People.def().rev())
    }
}

impl Related<super::contents::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_people::Relation::Contents.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contents_people::Relation::People.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
