//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "books")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub title: String,
    pub publisher_id: Option<i32>,
    pub format_id: Option<i32>,
    pub publication_date: Option<i64>,
    pub acquisition_date: Option<i64>,
    pub last_modified_date: Option<i64>,
    pub series_id: Option<i32>,
    pub series_index: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub original_title: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::books_contents::Entity")]
    BooksContents,
    #[sea_orm(has_many = "super::books_people::Entity")]
    BooksPeople,
    #[sea_orm(has_many = "super::books_tags::Entity")]
    BooksTags,
    #[sea_orm(
        belongs_to = "super::formats::Entity",
        from = "Column::FormatId",
        to = "super::formats::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Formats,
    #[sea_orm(
        belongs_to = "super::publishers::Entity",
        from = "Column::PublisherId",
        to = "super::publishers::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Publishers,
    #[sea_orm(
        belongs_to = "super::series::Entity",
        from = "Column::SeriesId",
        to = "super::series::Column::SeriesId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Series,
}

impl Related<super::books_contents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksContents.def()
    }
}

impl Related<super::books_people::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksPeople.def()
    }
}

impl Related<super::books_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksTags.def()
    }
}

impl Related<super::formats::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Formats.def()
    }
}

impl Related<super::publishers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Publishers.def()
    }
}

impl Related<super::series::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Series.def()
    }
}

impl Related<super::contents::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_contents::Relation::Contents.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::books_contents::Relation::Books.def().rev())
    }
}

impl Related<super::people::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_people::Relation::People.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::books_people::Relation::Books.def().rev())
    }
}

impl Related<super::tags::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_tags::Relation::Tags.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::books_tags::Relation::Books.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
