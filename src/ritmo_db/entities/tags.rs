//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tags")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub tag_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::books_tags::Entity")]
    BooksTags,
    #[sea_orm(has_many = "super::contents_tags::Entity")]
    ContentsTags,
}

impl Related<super::books_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksTags.def()
    }
}

impl Related<super::contents_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentsTags.def()
    }
}

impl Related<super::books::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_tags::Relation::Books.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::books_tags::Relation::Tags.def().rev())
    }
}

impl Related<super::contents::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents_tags::Relation::Contents.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contents_tags::Relation::Tags.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
